comment: """

    TODO:
    * syntax types, tuple types, union
    * take out ::Type
    * Add more regex stuff.
    * Some in comments throughout the grammar

"""
fileTypes: [
  "jl"
]
firstLineMatch: "^#!.*\\bjulia\\s*$"
foldingStartMarker: "^\\s*(?:if|while|for|begin|function|macro|module|baremodule|type|immutable|try|let)\\b(?!.*\\bend\\b).*$"
foldingStopMarker: "^\\s*(?:end)\\b.*$"
name: "Julia"
patterns: [
  {
    include: "#operator"
  }
  {
    include: "#array"
  }
  {
    include: "#string"
  }
  {
    include: "#bracket"
  }
  {
    include: "#function_decl"
  }
  {
    include: "#function_call"
  }
  {
    include: "#keyword"
  }
  {
    include: "#number"
  }
  {
    include: "#comment"
  }
  {
    include: "#type_decl"
  }
  {
    include: "#symbol"
  }
]
repository:
  array:
    patterns: [
      {
        begin: "\\["
        end: "\\]((\\.)?'*)"
        endCaptures:
          "1":
            name: "keyword.operator.transpose.julia"
        name: "meta.array.julia"
        patterns: [
          {
            match: "\\bend\\b"
            name: "constant.numeric.julia"
          }
          {
            include: "$self"
          }
        ]
      }
    ]
  bracket:
    patterns: [
      {
        match: "(?:\\(|\\)|\\[|\\]|\\{|\\}|,)(?!('|(?:\\.'))*\\.?')"
        name: "meta.bracket.julia"
      }
    ]
  comment:
    patterns: [
      {
        begin: "#="
        beginCaptures:
          "0":
            name: "punctuation.definition.comment.begin.julia"
        end: "=#"
        endCaptures:
          "0":
            name: "punctuation.definition.comment.end.julia"
        name: "comment.block.number-sign-equals.julia"
      }
      {
        captures:
          "1":
            name: "punctuation.definition.comment.julia"
        match: "(?<!\\$)(#)(?!\\{).*$\\n?"
        name: "comment.line.number-sign.julia"
      }
    ]
  function_call:
    patterns: [
      {
        begin: "([\\w.!]+!?)\\w*\\("
        beginCaptures:
          "1":
            name: "support.function.julia"
        end: "\\)(('|(\\.'))*\\.?')?"
        endCaptures:
          "1":
            name: "keyword.operator.transposed-func.julia"
        patterns: [
          {
            include: "$self"
          }
        ]
      }
    ]
  function_decl:
    patterns: [
      {
        captures:
          "1":
            name: "entity.name.function.julia"
          "2":
            name: "support.type.julia"
        match: "([\\w.!]+)({[^}]*})?\\((?=.*\\)\\s*=(?!=))"
        comment: "TODO: why do we have `.` in the function name characer class?"
        comment: """
        first group is function name
        Second group is type parameters (e.g. {T<:Number, S})
        Then open parens
        Then a lookahead ensures that we are followed by:
          - anything (function argumnets)
          - 0 or more spaces
          - Finally an equal sign
        Negative lookahead ensures we don't have another equal sign (not `==`)
        """
        comment: "This is different from the one in tpoisot's package"
      }
      {
        captures:
          "1":
            name: "keyword.other.julia"
          "2":
            name: "entity.name.function.julia"
          "3":
            name: "support.type.julia"
        match: "\\b(function|macro)\\s+([\\w.!]+)({[^}]*})?\\("
        comment: "similar regex to previous, but with keyword not 1-line syntax"
      }
    ]
  keyword:
    patterns: [
      {
        match: "\\b(?:function|@generated|type|immutable|macro|quote|abstract|bitstype|typealias|module|baremodule|new)\\b"
        name: "keyword.other.julia"
      }
      {
        match: "\\b(?:if|else|elseif|while|for|in|begin|let|end|do|try|catch|finally|return|break|throw|continue)\\b"
        name: "keyword.control.julia"
      }
      {
        match: "\\b(?:global|local|const|export|import|importall|using)\\b"
        name: "storage.modifier.variable.julia"
      }
      {
        match: '\\b(Int8|UInt8|Int16|UInt16|Int32|UInt32|Int64|UInt64|Int128|UInt128|Dict|Float16|Float32|Float64|Number|Real|FloatingPoint|Signed|Unsigned|Any|Bool|Char|ASCIIString|AbstractString|DataType|Array|DataFrame)\\b'
        name: 'storage.type.julia'
        comment: "TODO: This is being clobbered by support.type.julia"
       }
      {
        match: "@\\w+\\b"
        name: "support.function.macro.julia"
      }
      {
        match: "\\b(Argument|Assertion|Bounds|Divide|Domain|EOF|Inexact|Key|Load|Memory|Method|OutOfMemory|Overflow|Parse|StackOverflow|System|Type|UV|UndefRef|UndefVar)Error\\b"
        name: "support.type.exception.julia"
      }
    ]
  number:
    patterns: [
      {
        match: "((\\b0(x|X)[0-9a-fA-F](_?[0-9a-fA-F])*)|(\\b0o[0-7](_?[0-7])*)|(\\b0b[0-1](_?[0-1])*)|((\\b[0-9](_?[0-9])*\\.?(_?[0-9]*))|(\\.[0-9](_?[0-9])*))((e|E)(\\+|-)?(_?[0-9])*)?(im)?|\\bInf(32)?\\b|\\bNaN(32)?\\b)"
        name: "constant.numeric.julia"
      }
      {
        match: "\\btrue\\b|\\bfalse\\b|\\bnothing\\b"
        name: "constant.language.julia"
      }
    ]
  operator:
    patterns: [
      {
        match: "(?:=|:=|\\+=|-=|\\*=|/=|//=|\\.//=|\\.\\*=|\\\\=|\\.\\\\=|^=|\\.^=|%=|\\|=|&=|\\$=|<<=|>>=)"
        name: "keyword.operator.update.julia"
      }
      {
        match: "(?:::(?:(?:Union)?\\([^)]*\\)|\\w+(?:{[^}]*})?))(?:\\.\\.\\.)?"
        name: "support.type.julia"
      }
      {
        match: "(?:\\?|:)"
        name: "keyword.operator.ternary.julia"
      }
      {
        match: "(?:\\|\\||&&|!)"
        name: "keyword.operator.boolean.julia"
      }
      {
        match: "(?:->|<-|-->)"
        name: "keyword.operator.arrow.julia"
      }
      {
        match: "(?:>|<|>=|<=|==|!=|\\.>|\\.<|\\.>=|\\.>=|\\.==|\\.!=|\\.=|\\.!|<:|:>)"
        name: "keyword.operator.relation.julia"
      }
      {
        match: "(?::)"
        name: "keyword.operator.range.julia"
      }
      {
        match: "(?:<<|>>)"
        name: "keyword.operator.shift.julia"
      }
      {
        match: "(?:\\||\\&|~)"
        name: "keyword.operator.bitwise.julia"
      }
      {
        match: "(?:\\+|-|\\*|\\.\\*|/|\\./|//|\\.//|%|\\.%|\\\\|\\.\\\\|\\^|\\.\\^)"
        name: "keyword.operator.arithmetic.julia"
      }
      {
        match: "(?:::)"
        name: "keyword.operator.isa.julia"
      }
      {
        match: "(?:\\.(?=[a-zA-Z])|\\.\\.+)"
        name: "keyword.operator.dots.julia"
      }
      {
        match: "(?:\\$(?=.+))"
        name: "keyword.operator.interpolation.julia"
      }
      {
        captures:
          "2":
            name: "keyword.operator.transposed-variable.julia"
        match: "(\\w+)(('|(\\.'))*\\.?')"
      }
      {
        captures:
          "1":
            name: "keyword.bracket.end.julia"
          "2":
            name: "keyword.operator.transposed-matrix.julia"
        match: "(\\])((?:'|(?:\\.'))*\\.?')"
      }
      {
        captures:
          "1":
            name: "keyword.bracket.end.julia"
          "2":
            name: "keyword.operator.transposed-parens.julia"
        match: "(\\))((?:'|(?:\\.'))*\\.?')"
      }
    ]
  string:
    patterns: [
      {
        begin: '^\\s?(\\w+)?(""")\\s?$'
        beginCaptures:
          '1':
            'name': 'support.function.macro.julia'
          '2':
            'name': 'punctuation.definition.string.begin.julia'
        end: '\\s?^(""")\\s?$'
        endCaptures:
          '1':
            'name': 'punctuation.definition.string.end.julia'
        name: 'string.docstring.julia'
        contentName : 'source.gfm'
        comment: """
        This only matches docstrings that start and end with triple quotes on
        their own line in the void
        """
        patterns: [
          {
            include: 'source.gfm'
          }
          {
            include: '#string_escaped_char'
          }
          {
            include: "#string_dollar_sign_interpolate"
          }
        ]
      }
      {
        begin: "'"
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.julia"
        end: "'"
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.julia"
        name: "string.quoted.single.julia"
        patterns: [
          {
            include: "#string_escaped_char"
          }
        ]
      }
      {
        begin: '"""'
        beginCaptures:
          "0":
            name: "punctuation.definition.string.multiline.begin.julia"
        end: '"""'
        endCaptures:
          "0":
            name: "punctuation.definition.string.multiline.end.julia"
        name: "string.quoted.triple.double.julia"
        comment: "multi-line string with triple double quotes"
        comment: "TODO: decide on a name for this scope"
        patterns: [
          {
            include: "#string_escaped_char"
          }
          {
            include: "#string_dollar_sign_interpolate"
          }
        ]
      }
      {
        name: "string.quoted.double.julia"
        begin: '(?<!")"(?!")'
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.julia"
        end: '(?<!")"(?!")'
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.julia"
        comment: "String with single pair of double quotes. Regex matches isolated double quote"
        patterns: [
          {
            include: "#string_escaped_char"
          }
          {
            include: "#string_dollar_sign_interpolate"
          }
        ]
      }
      {
        begin: "r\""
        beginCaptures:
          "0":
            name: "punctuation.definition.string.regexp.begin.julia"
        end: "(\")([imsx]{0,4})?"
        endCaptures:
          "1":
            name: "punctuation.definition.string.regexp.end.julia"
          "2":
            comment: "I took this scope name from python regex grammar"
            name: "keyword.other.option-toggle.regexp.julia"
        name: 'string.regexp.julia'
        patterns: [
          {
            include: '#string_escaped_char'
          }
        ]
      }
      {
        begin: "\\b\\w+\""
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.julia"
        end: "\"\\w*"
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.julia"
        name: "string.quoted.other.julia"
        patterns: [
          {
            include: "#string_custom_escaped_char"
          }
        ]
      }
      {
        begin: "`"
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.julia"
        end: "`"
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.julia"
        name: "string.interpolated.backtick.julia"
        patterns: [
          {
            include: "#string_escaped_char"
          }
          {
            include: "#string_dollar_sign_interpolate"
          }
        ]
      }
      {
        begin: '(@doc) ((?:doc)?""")'
        beginCaptures:
          '1':
            'name': 'support.function.macro.julia'
          '2':
            'name': 'punctuation.definition.string.begin.julia'
        end: '(""") (->)'
        endCaptures:
          '1':
            'name': 'punctuation.definition.string.end.julia'
          '2':
            'name': 'keyword.operator.arrow.julia'
        name: 'string.docstring.julia'
        contentName : 'source.gfm'
        patterns: [
          {
            include: '#string_escaped_char'
          }
          {
            include: 'source.gfm'
          }
          {
            comment: "TODO: do we put dollar_sign interpolation in here?"
          }
          {
            include: "#string_dollar_sign_interpolate"
          }
        ]
      }
    ]
  string_custom_escaped_char:
    patterns: [
      {
        match: "\\\\\""
        name: "constant.character.escape.julia"
      }
    ]
  string_escaped_char:
    patterns: [
      {
        match: "\\\\(\\\\|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8}|.)"
        name: "constant.character.escape.julia"
      }
    ]
  string_dollar_sign_interpolate:
    patterns: [
      {
        match: "(\\$)(\\w+)"
        captures:
          "1":
            name: "keyword.operator.dollar-sign.julia"
          "2":
            patterns: [
              {
                include: "$self"
              }
            ]
        name: "string.interpolated.dollar-sign.julia"

      }
      {
        begin: "(\\$)\\("
        beginCaptures:
          "1":
            name: "keyword.operator.dollar-sign.julia"
        end: "\\)"
        name: "string.interpolated.dollar-sign.julia"
        patterns: [
          {
            include: "$self"
          }
        ]

      }
    ]
  symbol:
    patterns: [
      {
        match: "(?<![a-zA-Z0-9:<]:)(?<=:)[a-zA-Z_][a-zA-Z0-9_]*\\b"
        name: "constant.other.symbol.julia"
        comment: "This is string.quoted.symbol.julia in tpoisot's package"
      }
    ]
  type_decl:
    patterns: [
      {
        captures:
          "1":
            name: "keyword.control.type.julia"
          "2":
            name: "entity.name.type.julia"
          "3":
            name: "entity.other.inherited-class.julia"
          "4":
            name: "punctuation.separator.inheritance.julia"
        match: "(type|immutable)\\s+(\\w+)(\\s*(<:)\\s*\\w+(?:{.*})?)?"
        name: "meta.type.julia"
      }
    ]
scopeName: "source.julia"
